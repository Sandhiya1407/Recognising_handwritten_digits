# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kS-iTeGVow1lK2O79vnA-7-sNsCkULF1
"""

import torch
import torch.nn as nn
import torch.nn.functional as F
import torchvision
from torchvision import datasets, transforms

# Step 1: Data preparation
transform = transforms.ToTensor()

train_set = datasets.MNIST(root='./data', train=True, download=True, transform=transform)
test_set = datasets.MNIST(root='./data', train=False, download=True, transform=transform)

train_loader = torch.utils.data.DataLoader(train_set, batch_size=64, shuffle=True)
test_loader = torch.utils.data.DataLoader(test_set, batch_size=64, shuffle=False)

# Step 2: Define the deep learning model
class DigitModel(nn.Module):
    def __init__(self):
        super(DigitModel, self).__init__()
        self.fc1 = nn.Linear(28*28, 128)
        self.fc2 = nn.Linear(128, 64)
        self.fc3 = nn.Linear(64, 10)

    def forward(self, x):
        x = x.view(-1, 28*28)
        x = F.relu(self.fc1(x))
        x = F.relu(self.fc2(x))
        return self.fc3(x)

model = DigitModel()

# Step 3: Train the model
criterion = nn.CrossEntropyLoss()
optimizer = torch.optim.Adam(model.parameters(), lr=0.001)

for epoch in range(5):
    for images, labels in train_loader:
        optimizer.zero_grad()
        output = model(images)
        loss = criterion(output, labels)
        loss.backward()
        optimizer.step()
    print(f"Epoch {epoch+1} complete")

# Step 4: Evaluate model
correct = 0
total = 0
with torch.no_grad():
    for images, labels in test_loader:
        outputs = model(images)
        _, predicted = torch.max(outputs, 1)
        total += labels.size(0)
        correct += (predicted == labels).sum().item()

print(f"Test Accuracy: {correct / total:.2f}")

# Step 5: Prediction function with error handling
def predict_digit_pytorch(image_tensor):
    try:
        if not isinstance(image_tensor, torch.Tensor):
            raise TypeError("Input must be a torch.Tensor.")
        if image_tensor.shape != (1, 28, 28):
            raise ValueError("Input shape must be (1, 28, 28).")

        image_tensor = image_tensor.view(-1, 28*28)
        output = model(image_tensor)
        predicted = torch.argmax(output, 1)
        return predicted.item()
    except Exception as e:
        print(f"Error: {e}")
        return None

# Step 6: Test predictions
print("\n--- Valid Input ---")
valid_input, _ = test_set[0]
print("Prediction:", predict_digit_pytorch(valid_input))

print("\n--- Invalid Input (wrong shape) ---")
invalid_input = torch.zeros((28, 28))  # Missing batch dimension
print("Prediction:", predict_digit_pytorch(invalid_input))

print("\n--- Invalid Input (wrong type) ---")
print("Prediction:", predict_digit_pytorch("not a tensor"))